var peapod=peapod||{};peapod.debug={items:[],out:function(){console.log("Debug info goes here...")},log:function(e){peapod.vars.debug&&console.log(e)},spaceToLength:function(e,n){for(var t=e,o=e.length;n>=o;o++)t+=" ";return t},tStamp:function(e,n,t){peapod.vars.performanceLog&&null!==t&&peapod.log(e+": "+peapod.round(peapod.debug.time()-t,5)+" ms")},time:function(e){return e||peapod.vars.performanceLog?peapod.isSet(window.performance)&&window.performance.now?performance.now()+performance.timing.navigationStart:Date.now():null},round:function(e,n){return Math.round(e*Math.pow(10,n))/Math.pow(10,n)}},peapod.displaced={needsInit:!0,items:[],initGet:function(){},initSet:function(){},init:function(){var e=peapod.displaced;e.initGet(),e.initSet()}},peapod.events={items:[],currentId:0,makeEvent:function(e,n,t){e.length>0&&items.push({name:e,func:n,priority:t,id:peapod.events.currentId}),peapod.events.currentId++},bind:function(e,n,t){var o=peapod.events;if(e.indexOf(" ")>-1)for(var a=e.split(" "),r=0,p=a.length;p>r;r++)o.makeEvent(a[r],n,t);else o.makeEvent(e,n,t)},unbind:function(){},trigger:function(){},bindOnce:function(){}},peapod.name=function(e,n){var t=peapod.vars.cssUnique;return"state"===n?"is-"+e+t:"general"===n?e+t:"js"===n?"js-"+e+t:"js-"+e+t},peapod.isSet=function(e){return"undefined"==typeof e?!1:null===e?!1:!0},peapod.sel=function(e,n,t){return peapod.isSet(t)||(t=document),peapod.isSet(n)?peapod.select.phrases(t,e,n):peapod.select.phrases(t,e)},peapod.forEach=function(e,n,t){var o=0,a=e.length;if(t)for(o;a>o;o++)n(e[o]);else for(o;a>o;o++)n()},peapod.select={className:function(e,n,t){var o=e.getElementsByClassName(n);if(peapod.isSet(o)){if(peapod.isSet(t))for(var a=0,r=o.length;r>a;a++)t(o[a]);return o}return null},classNames:function(e,n,t){for(var o="",a=n.split("."),r=1,p=a.length;p>r;r++)""===o?o=a[r]:o+=" "+a[r];return peapod.select.className(e,o,t)},tagName:function(e,n,t){var o=e.getElementsByTagName(n);if(peapod.isSet(o)){if(peapod.isSet(t))for(var a=0,r=o.length;r>a;a++)t(o[a]);return o}return null},query:function(e,n,t){var o=e.querySelectorAll(n);if(o.length){if(peapod.isSet(t))for(var a=0,r=o.length;r>a;a++)t(o[a]);return o}return null},word:function(e,n,t){if(-1===n.indexOf("."))return peapod.select.tagName(e,n,t);var o=n.split(".");return 0===o[0].length?peapod.select.classNames(e,n,t):(peapod.select.query(e,n,t),null)},phrases:function(e,n,t){return n.indexOf(",")>-1||n.indexOf(" ")>-1||n.indexOf("!")>-1||n.indexOf("#")>-1||n.indexOf(">")>-1?void peapod.select.query(e,n,t):peapod.select.word(e,n,t)}},peapod.vars={version:"0.0.0.1 Alpha",needsInit:!0,cssUnique:"--P",debug:!0,performanceLog:!0};
//# sourceMappingURL=data:application/json;base64,