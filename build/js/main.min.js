var peapod=peapod||{};peapod.debug={items:[],out:function(){console.log("Debug info goes here...")},log:function(e){peapod.vars.debug&&console.log(e)},spaceToLength:function(e,n){for(var o=e,t=e.length;n>=t;t++)o+=" ";return o},tStamp:function(e,n,o){peapod.vars.performanceLog&&null!==o&&peapod.log(e+": "+peapod.round(peapod.debug.time()-o,5)+" ms")},time:function(e){return e||peapod.vars.performanceLog?peapod.isSet(window.performance)&&window.performance.now?performance.now()+performance.timing.navigationStart:Date.now():null},round:function(e,n){return Math.round(e*Math.pow(10,n))/Math.pow(10,n)}},peapod.displaced={needsInit:!0,items:[],initGet:function(){},initSet:function(){},init:function(){var e=peapod.displaced;e.initGet(),e.initSet()}},peapod.name=function(e,n){var o=peapod.vars.cssUnique;return"state"===n?"is-"+e+o:"general"===n?e+o:"js"===n?"js-"+e+o:"js-"+e+o},peapod.isSet=function(e){return"undefined"==typeof e?!1:null===e?!1:!0},peapod.vars={version:"0.0.0.1 Alpha",needsInit:!0,cssUnique:"--P",debug:!0,performanceLog:!0};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluaXQuanMiLCJkZWJ1Zy5qcyIsImRpc3BsYWNlZC5qcyIsImdlbmVyYWwuanMiLCJtYWluLmpzIl0sIm5hbWVzIjpbInBlYXBvZCIsImRlYnVnIiwiaXRlbXMiLCJvdXQiLCJjb25zb2xlIiwibG9nIiwibXNnIiwidmFycyIsInNwYWNlVG9MZW5ndGgiLCJpbnB1dCIsImxlbmd0aCIsInJlc3VsdCIsImkiLCJ0U3RhbXAiLCJsYWJlbCIsImxldmVsIiwic3RhcnRUaW1lIiwicGVyZm9ybWFuY2VMb2ciLCJyb3VuZCIsInRpbWUiLCJmb3JjZSIsImlzU2V0Iiwid2luZG93IiwicGVyZm9ybWFuY2UiLCJub3ciLCJ0aW1pbmciLCJuYXZpZ2F0aW9uU3RhcnQiLCJEYXRlIiwibnVtIiwicG9pbnRzIiwiTWF0aCIsInBvdyIsImRpc3BsYWNlZCIsIm5lZWRzSW5pdCIsImluaXRHZXQiLCJpbml0U2V0IiwiaW5pdCIsInBkIiwibmFtZSIsInZhbCIsInR5cGUiLCJjc3NVbmlxdWUiLCJ2ZXJzaW9uIl0sIm1hcHBpbmdzIjoiQUFjQSxHQUFBQSxRQUFBQSxVQ0FBQSxRQUFBQyxPQUNBQyxTQUVBQyxJQUFBLFdBQ0FDLFFBQUFDLElBQUEsNEJBR0FBLElBQUEsU0FBQUMsR0FDQU4sT0FBQU8sS0FBQU4sT0FBQUcsUUFBQUMsSUFBQUMsSUFHQUUsY0FBQSxTQUFBQyxFQUFBQyxHQUVBLElBQUEsR0FEQUMsR0FBQUYsRUFDQUcsRUFBQUgsRUFBQUMsT0FBQUEsR0FBQUUsRUFBQUEsSUFDQUQsR0FBQSxHQUVBLE9BQUFBLElBR0FFLE9BQUEsU0FBQUMsRUFBQUMsRUFBQUMsR0FDQWhCLE9BQUFPLEtBQUFVLGdCQUFBLE9BQUFELEdBQUFoQixPQUFBSyxJQUFBUyxFQUFBLEtBQUFkLE9BQUFrQixNQUFBbEIsT0FBQUMsTUFBQWtCLE9BQUFILEVBQUEsR0FBQSxRQUdBRyxLQUFBLFNBQUFDLEdBQ0EsTUFBQUEsSUFBQXBCLE9BQUFPLEtBQUFVLGVBQ0FqQixPQUFBcUIsTUFBQUMsT0FBQUMsY0FDQUQsT0FBQUMsWUFBQUMsSUFBQUQsWUFBQUMsTUFBQUQsWUFBQUUsT0FBQUMsZ0JBREFDLEtBQUFILE1BR0EsTUFHQU4sTUFBQSxTQUFBVSxFQUFBQyxHQUNBLE1BQUFDLE1BQUFaLE1BQUFVLEVBQUFFLEtBQUFDLElBQUEsR0FBQUYsSUFBQUMsS0FBQUMsSUFBQSxHQUFBRixLQ3BDQTdCLE9BQUFnQyxXQUNBQyxXQUFBLEVBQ0EvQixTQUVBZ0MsUUFBQSxhQUlBQyxRQUFBLGFBSUFDLEtBQUEsV0FDQSxHQUFBQyxHQUFBckMsT0FBQWdDLFNBQ0FLLEdBQUFILFVBQ0FHLEVBQUFGLFlDTkFuQyxPQUFBc0MsS0FBQSxTQUFBQyxFQUFBQyxHQUNBLEdBQUFDLEdBQUF6QyxPQUFBTyxLQUFBa0MsU0FDQSxPQUFBLFVBQUFELEVBQ0EsTUFBQUQsRUFBQUUsRUFDQSxZQUFBRCxFQUNBRCxFQUFBRSxFQUNBLE9BQUFELEVBQ0EsTUFBQUQsRUFBQUUsRUFFQSxNQUFBRixFQUFBRSxHQVNBekMsT0FBQXFCLE1BQUEsU0FBQWtCLEdBQ0EsTUFBQSxtQkFBQSxJQUFBLEVBQ0EsT0FBQUEsR0FBQSxHQUNBLEdDMUJBdkMsT0FBQU8sTUFDQW1DLFFBQUEsZ0JBQ0FULFdBQUEsRUFDQVEsVUFBQSxNQUNBeEMsT0FBQSxFQUNBZ0IsZ0JBQUEiLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIEZpbGUgdG8gaW5pdGlhbGl6ZSBwZWFwb2Qgb2JqZWN0XG4gKlxuICogQHZlcnNpb24gJHsgcGtnLnZlcnNpb24gfVxuICogQGF1dGhvciAkeyBwa2cuYXV0aG9yIH1cbiAqXG4gKiBAbGljZW5zZSAkeyBwa2cubGljZW5zZSB9LlxuICogQGNvcHlyaWdodCAkeyBwa2cuYXV0aG9yIH1cbiAqL1xuXG4vKipcbiAqIEluaXRpYWxpemUgcGVhcG9kIG9iamVjdFxuICovXG5cbnZhciBwZWFwb2QgPSBwZWFwb2QgfHwge307IiwiLyoqXG4gKiBAZmlsZSBHZW5lcmFsIGRlYnVnZ2luZyBmdW5jdGlvbnNcbiAqXG4gKiBAdmVyc2lvbiAkeyBwa2cudmVyc2lvbiB9XG4gKiBAYXV0aG9yICR7IHBrZy5hdXRob3IgfVxuICpcbiAqIEBsaWNlbnNlICR7IHBrZy5saWNlbnNlIH0uXG4gKiBAY29weXJpZ2h0ICR7IHBrZy5hdXRob3IgfVxuICovXG5cbi8qKlxuICogR2VuZXJhbCBGdW5jdGlvbiB0byBsb2cgcGVyZm9ybWFuY2UgcmVsYXRlZCBpbmZvcm1hdGlvbiBhbmQgZGVidWcgaW5mb3JtYXRpb25cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbnBlYXBvZC5kZWJ1ZyA9IHtcblx0aXRlbXM6IFtdLFxuXG5cdG91dDogZnVuY3Rpb24oKXtcblx0XHRjb25zb2xlLmxvZyhcIkRlYnVnIGluZm8gZ29lcyBoZXJlLi4uXCIpO1xuXHR9LFxuXG5cdGxvZzogZnVuY3Rpb24obXNnKXtcblx0XHRpZiAocGVhcG9kLnZhcnMuZGVidWcpIGNvbnNvbGUubG9nKG1zZyk7XG5cdH0sXG5cblx0c3BhY2VUb0xlbmd0aDogZnVuY3Rpb24oaW5wdXQsIGxlbmd0aCkge1xuXHRcdHZhciByZXN1bHQgPSBpbnB1dDtcblx0XHRmb3IgKHZhciBpID0gaW5wdXQubGVuZ3RoOyBpIDw9IGxlbmd0aDsgaSsrKSB7XG5cdFx0XHRyZXN1bHQgKz0gXCIgXCI7XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH0sXG5cblx0dFN0YW1wOiBmdW5jdGlvbiAobGFiZWwsIGxldmVsLCBzdGFydFRpbWUpIHtcblx0XHRpZiAocGVhcG9kLnZhcnMucGVyZm9ybWFuY2VMb2cgJiYgc3RhcnRUaW1lICE9PSBudWxsKSBwZWFwb2QubG9nKGxhYmVsICsgXCI6IFwiICsgcGVhcG9kLnJvdW5kKHBlYXBvZC5kZWJ1Zy50aW1lKCkgLSBzdGFydFRpbWUsIDUpICsgXCIgbXNcIik7XG5cdH0sXG5cblx0dGltZTogZnVuY3Rpb24oZm9yY2Upe1xuXHRcdGlmIChmb3JjZSB8fCBwZWFwb2QudmFycy5wZXJmb3JtYW5jZUxvZykge1xuXHRcdFx0aWYgKCFwZWFwb2QuaXNTZXQod2luZG93LnBlcmZvcm1hbmNlKSkgcmV0dXJuIERhdGUubm93KCk7XG5cdFx0XHRyZXR1cm4gd2luZG93LnBlcmZvcm1hbmNlLm5vdyA/IChwZXJmb3JtYW5jZS5ub3coKSArIHBlcmZvcm1hbmNlLnRpbWluZy5uYXZpZ2F0aW9uU3RhcnQpIDogRGF0ZS5ub3coKTtcblx0XHR9XG5cdFx0cmV0dXJuIG51bGw7XG5cdH0sXG5cblx0cm91bmQ6IGZ1bmN0aW9uKG51bSwgcG9pbnRzKXtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZChudW0gKiBNYXRoLnBvdygxMCwgcG9pbnRzKSkgLyBNYXRoLnBvdygxMCwgcG9pbnRzKTtcblx0fVxufTtcblxuIiwiLyoqXG4gKiBAZmlsZSBVdGlsaXR5IGZ1bmN0aW9ucyBmb3IgZGlzcGxhY2VkIGVsZW1lbnRzXG4gKlxuICogQHZlcnNpb24gJHsgcGtnLnZlcnNpb24gfVxuICogQGF1dGhvciAkeyBwa2cuYXV0aG9yIH1cbiAqXG4gKiBAbGljZW5zZSAkeyBwa2cubGljZW5zZSB9LlxuICogQGNvcHlyaWdodCAkeyBwa2cuYXV0aG9yIH1cbiAqL1xuXG5wZWFwb2QuZGlzcGxhY2VkID0ge1xuXHRuZWVkc0luaXQ6IHRydWUsXG5cdGl0ZW1zOiBbXSxcblxuXHRpbml0R2V0OiBmdW5jdGlvbigpe1xuXG5cdH0sXG5cblx0aW5pdFNldDogZnVuY3Rpb24oKXtcblxuXHR9LFxuXG5cdGluaXQ6IGZ1bmN0aW9uKCl7XG5cdFx0dmFyIHBkID0gcGVhcG9kLmRpc3BsYWNlZDtcblx0XHRwZC5pbml0R2V0KCk7XG5cdFx0cGQuaW5pdFNldCgpO1xuXHR9XG59OyIsIi8qKlxuICogQGZpbGUgR2VuZXJhbCB1dGlsaXR5IGZ1bmN0aW9uc1xuICpcbiAqIEB2ZXJzaW9uICR7IHBrZy52ZXJzaW9uIH1cbiAqIEBhdXRob3IgJHsgcGtnLmF1dGhvciB9XG4gKlxuICogQGxpY2Vuc2UgJHsgcGtnLmxpY2Vuc2UgfS5cbiAqIEBjb3B5cmlnaHQgJHsgcGtnLmF1dGhvciB9XG4gKlxuICovXG5cblxuLyoqXG4gKiBGdW5jdGlvbiB0byBjcmVhdGUgYSBjbGFzcyBuYW1lIGZvciB1c2UgaW4gdGhlIERPTVxuICogQGZ1bmN0aW9uIGNyZWF0ZXMgYSBjbGFzcyBuYW1lIGZvciB1c2UgaW4gdGhlIERPTVxuICogQHBhcmFtICB7c3RyaW5nfSB2YWwgIGJhc2UgY2xhc3MgbmFtZVxuICogQHBhcmFtICB7c3RyaW5nfSB0eXBlIG9wdGlvbiBmb3IgdGhlIHR5cGUgb2YgY2xhc3NuYW1lIHRvIGdlbmVyYXRlIChzdGF0ZSwgZ2VuZXJhbCwganMsIG9yIGJsYW5rKVxuICogQHJldHVybiB7c3RyaW5nfSAgICAgIHJlc3VsdGluZyBjbGFzcyBuYW1lXG4gKi9cbnBlYXBvZC5uYW1lID0gZnVuY3Rpb24odmFsLCB0eXBlKXtcblx0dmFyIGNzc1VuaXF1ZSA9IHBlYXBvZC52YXJzLmNzc1VuaXF1ZTtcblx0aWYgKHR5cGUgPT09IFwic3RhdGVcIil7XG5cdFx0cmV0dXJuIFwiaXMtXCIgKyB2YWwgKyBjc3NVbmlxdWU7XG5cdH0gZWxzZSBpZiAodHlwZSA9PT0gXCJnZW5lcmFsXCIpIHtcblx0XHRyZXR1cm4gdmFsICsgY3NzVW5pcXVlO1xuXHR9IGVsc2UgaWYgKHR5cGUgPT09IFwianNcIikge1xuXHRcdHJldHVybiBcImpzLVwiICsgdmFsICsgY3NzVW5pcXVlO1xuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBcImpzLVwiICsgdmFsICsgY3NzVW5pcXVlO1xuXHR9XG59O1xuXG4vKipcbiAqIEZ1bmN0aW9uIHRvIHNlZSBpZiBhIHZhcmlhYmxlIGhhcyBiZWVuIHNldCB0byBhIHZhbHVlXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICB2YWwgdmFyaWFibGVcbiAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICBpZiBpdCdzIHNldFxuICovXG5wZWFwb2QuaXNTZXQgPSBmdW5jdGlvbih2YWwpe1xuXHRpZiAodHlwZW9mKHZhbCkgPT09IFwidW5kZWZpbmVkXCIpIHJldHVybiBmYWxzZTtcblx0aWYgKHZhbCA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXHRyZXR1cm4gdHJ1ZTtcbn07XG4iLCIvKipcbiAqIEBmaWxlIE1haW4gZmlsZSBmb3IgYWxsIGpzXG4gKlxuICogQHZlcnNpb24gJHsgcGtnLnZlcnNpb24gfVxuICogQGF1dGhvciAkeyBwa2cuYXV0aG9yIH1cbiAqXG4gKiBAbGljZW5zZSAkeyBwa2cubGljZW5zZSB9LlxuICogQGNvcHlyaWdodCAkeyBwa2cuYXV0aG9yIH1cbiAqL1xuXG4vKipcbiAqIERlY2xhcmUgdmFyaWFibGVzIHNldCBpbnNpZGUgdGhlIGZpbGVcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbnBlYXBvZC52YXJzID0ge1xuXHR2ZXJzaW9uOiAnMC4wLjAuMSBBbHBoYScsXG5cdG5lZWRzSW5pdDogdHJ1ZSxcblx0Y3NzVW5pcXVlOiAnLS1QJyxcblx0ZGVidWc6IHRydWUsXG5cdHBlcmZvcm1hbmNlTG9nOiB0cnVlXG59O1xuXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=