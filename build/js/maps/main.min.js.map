{"version":3,"sources":["init.js","debug.js","general.js","main.js"],"names":["peapod","debug","items","out","console","log","msg","vars","spaceToLength","input","length","result","i","tStamp","label","level","startTime","performanceLog","round","time","force","isSet","window","performance","now","timing","navigationStart","Date","num","points","Math","pow","name","val","type","cssUnique","version","needsInit"],"mappings":"AAIA,GAAAA,QAAAA,UCAAA,QAAAC,OACAC,SAEAC,IAAA,WACAC,QAAAC,IAAA,4BAGAA,IAAA,SAAAC,GACAN,OAAAO,KAAAN,OAAAG,QAAAC,IAAAC,IAGAE,cAAA,SAAAC,EAAAC,GAEA,IAAA,GADAC,GAAAF,EACAG,EAAAH,EAAAC,OAAAA,GAAAE,EAAAA,IACAD,GAAA,GAEA,OAAAA,IAGAE,OAAA,SAAAC,EAAAC,EAAAC,GACAhB,OAAAO,KAAAU,gBAAA,OAAAD,GAAAhB,OAAAK,IAAAS,EAAA,KAAAd,OAAAkB,MAAAlB,OAAAC,MAAAkB,OAAAH,EAAA,GAAA,QAGAG,KAAA,SAAAC,GACA,MAAAA,IAAApB,OAAAO,KAAAU,eACAjB,OAAAqB,MAAAC,OAAAC,cACAD,OAAAC,YAAAC,IAAAD,YAAAC,MAAAD,YAAAE,OAAAC,gBADAC,KAAAH,MAGA,MAGAN,MAAA,SAAAU,EAAAC,GACA,MAAAC,MAAAZ,MAAAU,EAAAE,KAAAC,IAAA,GAAAF,IAAAC,KAAAC,IAAA,GAAAF,KC7BA7B,OAAAgC,KAAA,SAAAC,EAAAC,GACA,GAAAC,GAAAnC,OAAAO,KAAA4B,SACA,OAAA,UAAAD,EACA,MAAAD,EAAAE,EACA,YAAAD,EACAD,EAAAE,EACA,OAAAD,EACA,MAAAD,EAAAE,EAEA,MAAAF,EAAAE,GAKAnC,OAAAqB,MAAA,SAAAY,GACA,MAAA,mBAAA,IAAA,EACA,OAAAA,GAAA,GACA,GCnBAjC,OAAAO,MACA6B,QAAA,gBACAC,WAAA,EACAF,UAAA,MACAlC,OAAA,EACAgB,gBAAA","file":"main.min.js","sourcesContent":["/**\n * Initialize peapod object\n */\n\nvar peapod = peapod || {};","/**\n * General Function to log performance related information and debug information\n * @type {Object}\n */\npeapod.debug = {\n\titems: [],\n\n\tout: function(){\n\t\tconsole.log(\"Debug info goes here...\");\n\t},\n\n\tlog: function(msg){\n\t\tif (peapod.vars.debug) console.log(msg);\n\t},\n\n\tspaceToLength: function(input, length) {\n\t\tvar result = input;\n\t\tfor (var i = input.length; i <= length; i++) {\n\t\t\tresult += \" \";\n\t\t}\n\t\treturn result;\n\t},\n\n\ttStamp: function (label, level, startTime) {\n\t\tif (peapod.vars.performanceLog && startTime !== null) peapod.log(label + \": \" + peapod.round(peapod.debug.time() - startTime, 5) + \" ms\");\n\t},\n\n\ttime: function(force){\n\t\tif (force || peapod.vars.performanceLog) {\n\t\t\tif (!peapod.isSet(window.performance)) return Date.now();\n\t\t\treturn window.performance.now ? (performance.now() + performance.timing.navigationStart) : Date.now();\n\t\t}\n\t\treturn null;\n\t},\n\n\tround: function(num, points){\n\t\treturn Math.round(num * Math.pow(10, points)) / Math.pow(10, points);\n\t}\n};\n\n","\n/**\n * Function to create a class name for use in the DOM\n * @param  {string} val  base class name\n * @param  {string} type option for the type of classname to generate (state, general, js, or blank)\n * @return {string}      resulting class name\n */\npeapod.name = function(val, type){\n\tvar cssUnique = peapod.vars.cssUnique;\n\tif (type === \"state\"){\n\t\treturn \"is-\" + val + cssUnique;\n\t} else if (type === \"general\") {\n\t\treturn val + cssUnique;\n\t} else if (type === \"js\") {\n\t\treturn \"js-\" + val + cssUnique;\n\t} else {\n\t\treturn \"js-\" + val + cssUnique;\n\t}\n};\n\n\npeapod.isSet = function(val){\n\tif (typeof(val) === \"undefined\") return false;\n\tif (val === null) return false;\n\treturn true;\n};\n","\n/**\n * Declare variables set inside the file\n * @type {Object}\n */\npeapod.vars = {\n\tversion: '0.0.0.1 Alpha',\n\tneedsInit: true,\n\tcssUnique: '--P',\n\tdebug: true,\n\tperformanceLog: true\n};\n\n"],"sourceRoot":"/source/"}